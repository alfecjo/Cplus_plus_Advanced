#include <iostream>
#include <list>
#include <set>
#include <algorithm>

using namespace std;

/*
Algorithms Non-Modifying ‚Äì STL C++

Esses algoritmos percorrem os elementos de uma cole√ß√£o (geralmente usando iteradores),
mas **n√£o alteram** os dados originais. Como o nome diz: *n√£o modificam* ‚Äî s√≥ olham, contam, procuram e analisam.

S√£o ideais para buscas, verifica√ß√µes, compara√ß√µes e medi√ß√µes dentro de ranges, mantendo a cole√ß√£o intacta
(como um fiscal de obra: observa tudo, mas n√£o pega na enxada üòÖ).

Principais exemplos:

    - all_of(begin, end, pred):
        Verifica se *todos* os elementos satisfazem uma condi√ß√£o.
        Exemplo: todos os n√∫meros s√£o pares?

    - any_of(begin, end, pred):
        Verifica se *ao menos um* elemento satisfaz a condi√ß√£o.
        Exemplo: h√° algum n√∫mero negativo?

    - none_of(begin, end, pred):
        Verifica se *nenhum* elemento satisfaz a condi√ß√£o.
        Exemplo: todos os nomes est√£o vazios?

    - for_each(begin, end, func):
        Aplica uma fun√ß√£o a cada elemento (sem modificar a cole√ß√£o em si).
        Exemplo: imprimir cada valor, somar em uma vari√°vel externa etc.

    - find(begin, end, value):
        Procura por um elemento com valor exato.
        Retorna iterador para o primeiro encontrado, ou end se n√£o achar.

    - find_if(begin, end, pred):
        Parecido com `find`, mas usa uma fun√ß√£o condicional (predicate).
        Exemplo: achar o primeiro n√∫mero primo.

    - find_if_not(begin, end, pred):
        Oposto do `find_if`: acha o primeiro que *n√£o* satisfaz a condi√ß√£o.

    - count(begin, end, value):
        Conta quantas vezes um valor aparece no range.

    - count_if(begin, end, pred):
        Conta quantos elementos satisfazem a condi√ß√£o.

    - mismatch(range1, range2):
        Compara dois ranges, retorna o primeiro par de elementos que diferem.

    - equal(range1, range2):
        Verifica se dois ranges t√™m os *mesmos elementos* na mesma ordem.

    - search(range1, range2):
        Procura se o `range2` aparece como subsequ√™ncia dentro do `range1`.

    - adjacent_find(begin, end):
        Procura por dois elementos consecutivos com o *mesmo valor*.

Aplica√ß√µes:
    - Muito √∫teis para valida√ß√£o de dados, an√°lise, filtragem e inspe√ß√£o sem afetar o estado da cole√ß√£o.
    - Base para l√≥gica de neg√≥cio que depende de *comportamento observado*, sem efeitos colaterais.

Observa√ß√µes:
    - N√£o alteram os dados, mas podem gerar *efeitos colaterais* (ex.: `for_each` com `cout`, logs, etc).
    - Geralmente exigem que os iteradores sejam ao menos `InputIterator`.

Dica ninja:
    Use com lambdas para manter o c√≥digo elegante e expressivo, evitando fun√ß√µes auxiliares separadas
    (a menos que queira impressionar algu√©m com abstra√ß√£o pura üòé).

*/

void print(const int& value)
{
    cout << value << " ";
}

// Functor (objeto fun√ß√£o) que imprime um valor - tamb√©m precisa ser const para uso com set
struct Print
{
    void operator()(const int& value) const
    {
        cout << value << " ";
    }
};

int main()
{
    int t[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Cria uma lista (container sequencial) com os valores do array
    list<int> l1(t, t + 10);

    cout << "Print all elements of the list - using function\n";
    // Usa o algoritmo for_each para percorrer todos os elementos da lista
    for_each(l1.begin(), l1.end(), print);
    cout << endl << endl;

    cout << "Print all elements of the list - using function object\n";
    // Usa o algoritmo for_each com um functor (objeto fun√ß√£o)
    for_each(l1.begin(), l1.end(), Print());
    cout << endl << endl;

    // Agora o mesmo com um container associativo: set
    // Lembrando que o set n√£o permite modificar seus elementos durante a itera√ß√£o
    set<int> s1(t, t + 10);

    // Usa o algoritmo for_each para percorrer todos os elementos do set
    cout << "Print all elements of the set - using function\n";
    for_each(s1.begin(), s1.end(), print);
    cout << endl << endl;

    // Usa o algoritmo for_each com um functor (objeto fun√ß√£o) para o set
    cout << "Print all elements of the set - using function object\n";
    for_each(s1.begin(), s1.end(), Print());
    cout << endl << endl;

    return 0;
}
